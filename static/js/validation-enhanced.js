// Enhanced Email Validation Module - Production Level\nconst ValidationEnhanced = {\n    // Email validation patterns\n    patterns: {\n        basic: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        strict: /^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?@[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\\.[a-zA-Z]{2,}$/,\n        disposable: /\\b(?:10minutemail|guerrillamail|mailinator|tempmail|yopmail|throwaway)\\b/i\n    },\n\n    // Common typos and corrections\n    domainCorrections: {\n        'gmail.co': 'gmail.com',\n        'gmail.cm': 'gmail.com',\n        'gmai.com': 'gmail.com',\n        'gmial.com': 'gmail.com',\n        'yahoo.co': 'yahoo.com',\n        'yahoo.cm': 'yahoo.com',\n        'hotmail.co': 'hotmail.com',\n        'hotmail.cm': 'hotmail.com',\n        'outlook.co': 'outlook.com',\n        'outlook.cm': 'outlook.com'\n    },\n\n    // Initialize enhanced validation\n    init() {\n        this.elements = {\n            emailsInput: document.getElementById('emails-to-validate'),\n            validateBtn: document.getElementById('validate-emails-btn'),\n            clearBtn: document.getElementById('clear-input-btn'),\n            emailCount: document.getElementById('email-count'),\n            validationStatus: document.getElementById('validation-status'),\n            resultsContainer: document.getElementById('validation-results')\n        };\n\n        this.bindEvents();\n        this.setupRealTimeValidation();\n    },\n\n    bindEvents() {\n        if (this.elements.emailsInput) {\n            this.elements.emailsInput.addEventListener('input', () => this.updateEmailCount());\n            this.elements.emailsInput.addEventListener('paste', (e) => this.handlePaste(e));\n        }\n        \n        if (this.elements.validateBtn) {\n            this.elements.validateBtn.addEventListener('click', () => this.validateEmails());\n        }\n        \n        if (this.elements.clearBtn) {\n            this.elements.clearBtn.addEventListener('click', () => this.clearInput());\n        }\n    },\n\n    setupRealTimeValidation() {\n        if (!this.elements.emailsInput) return;\n        \n        let timeout;\n        this.elements.emailsInput.addEventListener('input', () => {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => {\n                this.performRealTimeValidation();\n            }, 500);\n        });\n    },\n\n    handlePaste(event) {\n        setTimeout(() => {\n            this.cleanAndFormatInput();\n            this.updateEmailCount();\n        }, 10);\n    },\n\n    cleanAndFormatInput() {\n        if (!this.elements.emailsInput) return;\n        \n        let text = this.elements.emailsInput.value;\n        \n        // Remove extra whitespace and normalize line breaks\n        text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n        text = text.replace(/\\s+/g, ' ').trim();\n        \n        // Extract emails from various formats\n        const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n        const emails = text.match(emailRegex) || [];\n        \n        // Remove duplicates and format\n        const uniqueEmails = [...new Set(emails.map(email => email.toLowerCase().trim()))];\n        \n        this.elements.emailsInput.value = uniqueEmails.join('\\n');\n    },\n\n    updateEmailCount() {\n        if (!this.elements.emailsInput || !this.elements.emailCount) return;\n        \n        const emails = this.getEmailsFromInput();\n        const count = emails.length;\n        \n        this.elements.emailCount.textContent = count;\n        \n        // Update validation button state\n        if (this.elements.validateBtn) {\n            this.elements.validateBtn.disabled = count === 0 || count > 1000;\n        }\n        \n        // Update status\n        if (this.elements.validationStatus) {\n            if (count === 0) {\n                this.elements.validationStatus.textContent = 'Enter emails to validate';\n            } else if (count > 1000) {\n                this.elements.validationStatus.textContent = 'Too many emails (max 1000)';\n                this.elements.validationStatus.className = 'text-red-600';\n            } else {\n                this.elements.validationStatus.textContent = `${count} emails ready for validation`;\n                this.elements.validationStatus.className = 'text-green-600';\n            }\n        }\n    },\n\n    getEmailsFromInput() {\n        if (!this.elements.emailsInput) return [];\n        \n        return this.elements.emailsInput.value\n            .split('\\n')\n            .map(email => email.trim().toLowerCase())\n            .filter(email => email.length > 0);\n    },\n\n    performRealTimeValidation() {\n        const emails = this.getEmailsFromInput();\n        if (emails.length === 0) return;\n        \n        const sample = emails.slice(0, 10); // Validate first 10 for real-time feedback\n        let validCount = 0;\n        let invalidCount = 0;\n        \n        sample.forEach(email => {\n            if (this.validateEmailFormat(email).isValid) {\n                validCount++;\n            } else {\n                invalidCount++;\n            }\n        });\n        \n        if (this.elements.validationStatus && sample.length > 0) {\n            const percentage = Math.round((validCount / sample.length) * 100);\n            this.elements.validationStatus.textContent = `Sample validation: ${percentage}% valid (${validCount}/${sample.length})`;\n        }\n    },\n\n    validateEmailFormat(email) {\n        const result = {\n            email: email,\n            isValid: false,\n            issues: [],\n            suggestions: [],\n            risk: 'low'\n        };\n\n        // Basic format check\n        if (!this.patterns.basic.test(email)) {\n            result.issues.push('Invalid email format');\n            return result;\n        }\n\n        // Length checks\n        if (email.length > 254) {\n            result.issues.push('Email too long (max 254 characters)');\n            return result;\n        }\n\n        const [localPart, domain] = email.split('@');\n        \n        // Local part validation\n        if (localPart.length > 64) {\n            result.issues.push('Local part too long (max 64 characters)');\n        }\n        \n        if (localPart.startsWith('.') || localPart.endsWith('.')) {\n            result.issues.push('Local part cannot start or end with a dot');\n        }\n        \n        if (localPart.includes('..')) {\n            result.issues.push('Local part cannot contain consecutive dots');\n        }\n\n        // Domain validation\n        if (domain.length > 253) {\n            result.issues.push('Domain too long (max 253 characters)');\n        }\n        \n        if (domain.startsWith('-') || domain.endsWith('-')) {\n            result.issues.push('Domain cannot start or end with hyphen');\n        }\n\n        // Check for common typos\n        const suggestion = this.domainCorrections[domain];\n        if (suggestion) {\n            result.suggestions.push(`Did you mean ${localPart}@${suggestion}?`);\n            result.risk = 'medium';\n        }\n\n        // Check for disposable email\n        if (this.patterns.disposable.test(domain)) {\n            result.issues.push('Disposable email detected');\n            result.risk = 'high';\n        }\n\n        // Check for suspicious patterns\n        if (localPart.match(/^[0-9]+$/) || localPart.length < 3) {\n            result.risk = 'medium';\n        }\n\n        // Strict validation\n        if (this.patterns.strict.test(email) && result.issues.length === 0) {\n            result.isValid = true;\n        }\n\n        return result;\n    },\n\n    async validateEmails() {\n        const emails = this.getEmailsFromInput();\n        \n        if (emails.length === 0) {\n            this.showNotification('Please enter some emails to validate', 'warning');\n            return;\n        }\n        \n        if (emails.length > 1000) {\n            this.showNotification('Maximum 1000 emails allowed per batch', 'error');\n            return;\n        }\n\n        // Show loading state\n        this.setLoadingState(true);\n        \n        try {\n            // Client-side validation first\n            const clientResults = emails.map(email => this.validateEmailFormat(email));\n            \n            // Server-side validation\n            const serverResults = await API.validateEmails(emails);\n            \n            // Combine results\n            const combinedResults = this.combineValidationResults(clientResults, serverResults);\n            \n            // Display results\n            this.displayResults(combinedResults);\n            \n        } catch (error) {\n            this.showNotification(`Validation failed: ${error.message}`, 'error');\n        } finally {\n            this.setLoadingState(false);\n        }\n    },\n\n    combineValidationResults(clientResults, serverResults) {\n        return clientResults.map((clientResult, index) => {\n            const serverResult = serverResults.results?.[index] || {};\n            \n            return {\n                ...clientResult,\n                deliverable: serverResult.deliverable || false,\n                mx_record: serverResult.mx_record || false,\n                smtp_check: serverResult.smtp_check || false,\n                overall_score: this.calculateOverallScore(clientResult, serverResult)\n            };\n        });\n    },\n\n    calculateOverallScore(clientResult, serverResult) {\n        let score = 0;\n        \n        if (clientResult.isValid) score += 30;\n        if (serverResult.deliverable) score += 40;\n        if (serverResult.mx_record) score += 20;\n        if (serverResult.smtp_check) score += 10;\n        \n        // Deduct for issues\n        if (clientResult.risk === 'high') score -= 30;\n        if (clientResult.risk === 'medium') score -= 15;\n        if (clientResult.issues.length > 0) score -= (clientResult.issues.length * 5);\n        \n        return Math.max(0, Math.min(100, score));\n    },\n\n    displayResults(results) {\n        if (!this.elements.resultsContainer) return;\n        \n        const stats = this.calculateStats(results);\n        \n        const html = `\n            <div class=\"mb-6\">\n                <h3 class=\"text-xl font-bold mb-4\">Validation Results</h3>\n                <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                    <div class=\"bg-green-100 p-4 rounded-lg text-center\">\n                        <div class=\"text-2xl font-bold text-green-600\">${stats.valid}</div>\n                        <div class=\"text-sm text-green-700\">Valid</div>\n                    </div>\n                    <div class=\"bg-red-100 p-4 rounded-lg text-center\">\n                        <div class=\"text-2xl font-bold text-red-600\">${stats.invalid}</div>\n                        <div class=\"text-sm text-red-700\">Invalid</div>\n                    </div>\n                    <div class=\"bg-yellow-100 p-4 rounded-lg text-center\">\n                        <div class=\"text-2xl font-bold text-yellow-600\">${stats.risky}</div>\n                        <div class=\"text-sm text-yellow-700\">Risky</div>\n                    </div>\n                    <div class=\"bg-blue-100 p-4 rounded-lg text-center\">\n                        <div class=\"text-2xl font-bold text-blue-600\">${stats.deliverable}</div>\n                        <div class=\"text-sm text-blue-700\">Deliverable</div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"mb-4 flex justify-between items-center\">\n                <h4 class=\"text-lg font-semibold\">Detailed Results</h4>\n                <div class=\"space-x-2\">\n                    <button onclick=\"ValidationEnhanced.exportResults('valid')\" class=\"btn-secondary text-sm\">Export Valid</button>\n                    <button onclick=\"ValidationEnhanced.exportResults('all')\" class=\"btn-secondary text-sm\">Export All</button>\n                </div>\n            </div>\n            \n            <div class=\"max-h-96 overflow-y-auto\">\n                <table class=\"w-full text-sm\">\n                    <thead class=\"bg-gray-100 sticky top-0\">\n                        <tr>\n                            <th class=\"p-2 text-left\">Email</th>\n                            <th class=\"p-2 text-left\">Status</th>\n                            <th class=\"p-2 text-left\">Score</th>\n                            <th class=\"p-2 text-left\">Issues</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${results.map(result => this.renderResultRow(result)).join('')}\n                    </tbody>\n                </table>\n            </div>\n        `;\n        \n        this.elements.resultsContainer.innerHTML = html;\n        this.elements.resultsContainer.classList.remove('hidden');\n        \n        // Store results for export\n        this.lastResults = results;\n    },\n\n    renderResultRow(result) {\n        const statusClass = result.overall_score >= 70 ? 'text-green-600' : \n                           result.overall_score >= 40 ? 'text-yellow-600' : 'text-red-600';\n        \n        const statusText = result.overall_score >= 70 ? 'Valid' : \n                          result.overall_score >= 40 ? 'Risky' : 'Invalid';\n        \n        const issues = [...result.issues, ...result.suggestions].join(', ') || 'None';\n        \n        return `\n            <tr class=\"border-b hover:bg-gray-50\">\n                <td class=\"p-2 font-mono text-xs\">${this.escapeHtml(result.email)}</td>\n                <td class=\"p-2 ${statusClass} font-semibold\">${statusText}</td>\n                <td class=\"p-2\">${result.overall_score}/100</td>\n                <td class=\"p-2 text-xs text-gray-600\">${this.escapeHtml(issues)}</td>\n            </tr>\n        `;\n    },\n\n    calculateStats(results) {\n        return {\n            total: results.length,\n            valid: results.filter(r => r.overall_score >= 70).length,\n            invalid: results.filter(r => r.overall_score < 40).length,\n            risky: results.filter(r => r.overall_score >= 40 && r.overall_score < 70).length,\n            deliverable: results.filter(r => r.deliverable).length\n        };\n    },\n\n    exportResults(type = 'all') {\n        if (!this.lastResults) return;\n        \n        let dataToExport = this.lastResults;\n        \n        if (type === 'valid') {\n            dataToExport = this.lastResults.filter(r => r.overall_score >= 70);\n        }\n        \n        const csv = this.convertToCSV(dataToExport);\n        this.downloadCSV(csv, `email-validation-${type}-${new Date().toISOString().split('T')[0]}.csv`);\n    },\n\n    convertToCSV(results) {\n        const headers = ['Email', 'Status', 'Score', 'Valid Format', 'Deliverable', 'MX Record', 'SMTP Check', 'Issues', 'Suggestions'];\n        \n        const rows = results.map(result => [\n            result.email,\n            result.overall_score >= 70 ? 'Valid' : result.overall_score >= 40 ? 'Risky' : 'Invalid',\n            result.overall_score,\n            result.isValid ? 'Yes' : 'No',\n            result.deliverable ? 'Yes' : 'No',\n            result.mx_record ? 'Yes' : 'No',\n            result.smtp_check ? 'Yes' : 'No',\n            result.issues.join('; '),\n            result.suggestions.join('; ')\n        ]);\n        \n        return [headers, ...rows].map(row => \n            row.map(field => `\"${String(field).replace(/\"/g, '\"\"')}\"`).join(',')\n        ).join('\\n');\n    },\n\n    downloadCSV(csv, filename) {\n        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        \n        if (link.download !== undefined) {\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    },\n\n    setLoadingState(loading) {\n        if (!this.elements.validateBtn) return;\n        \n        if (loading) {\n            this.elements.validateBtn.disabled = true;\n            this.elements.validateBtn.innerHTML = `\n                <div class=\"inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Validating...\n            `;\n        } else {\n            this.elements.validateBtn.disabled = false;\n            this.elements.validateBtn.innerHTML = `\n                <i data-lucide=\"check-circle\" class=\"w-4 h-4 mr-2\"></i>\n                Validate Emails\n            `;\n            if (window.lucide) lucide.createIcons();\n        }\n    },\n\n    clearInput() {\n        if (this.elements.emailsInput) {\n            this.elements.emailsInput.value = '';\n            this.updateEmailCount();\n        }\n        \n        if (this.elements.resultsContainer) {\n            this.elements.resultsContainer.classList.add('hidden');\n        }\n        \n        this.lastResults = null;\n    },\n\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        const bgColor = type === 'error' ? 'bg-red-100 border-red-400 text-red-700' : \n                        type === 'success' ? 'bg-green-100 border-green-400 text-green-700' :\n                        type === 'warning' ? 'bg-yellow-100 border-yellow-400 text-yellow-700' :\n                        'bg-blue-100 border-blue-400 text-blue-700';\n        \n        notification.className = `fixed top-4 right-4 p-4 border rounded-lg ${bgColor} z-50 max-w-sm`;\n        notification.textContent = message;\n        \n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n        }, 5000);\n    },\n\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n};\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => ValidationEnhanced.init());\n} else {\n    ValidationEnhanced.init();\n}\n\n// Replace original validation module\nif (typeof Validation !== 'undefined') {\n    Object.assign(Validation, ValidationEnhanced);\n}